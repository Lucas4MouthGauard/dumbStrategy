'use client'

import React, { useState, useEffect, useRef } from 'react'
import { useWallet } from './SimpleWalletProvider'
import SimpleWalletButton from './SimpleWalletButton'
import cryptoApiService, { type CryptoPrice } from '../lib/cryptoApi'

interface Strategy {
  id: string
  name: string
  emoji: string
  category: 'bullish' | 'bearish' | 'neutral' | 'fomo' | 'hodl'
  description: string
  risk: 'low' | 'medium' | 'high' | 'extreme'
  potential: 'low' | 'medium' | 'high' | 'moon'
  advice: string[]
  tokens: string[]
  confidence: number
  marketSentiment: string
  timeframe: string
  entryPrice?: number
  targetPrice?: number
  stopLoss?: number
}

interface RouletteHistory {
  id: string
  strategy: Strategy
  timestamp: number
  userAddress?: string
  likes: number
  shares: number
  comments: number
}

const StrategyRoulette = () => {
  const { publicKey, connected } = useWallet()
  const [isSpinning, setIsSpinning] = useState(false)
  const [currentStrategy, setCurrentStrategy] = useState<Strategy | null>(null)
  const [spinCount, setSpinCount] = useState(0)
  const [rotation, setRotation] = useState(0)
  const [rouletteHistory, setRouletteHistory] = useState<RouletteHistory[]>([])
  const [activeTab, setActiveTab] = useState<'spin' | 'history' | 'analysis'>('spin')
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [marketData, setMarketData] = useState({
    btcPrice: 45000,
    ethPrice: 2800,
    solPrice: 100,
    marketCap: 2500000000000,
    volume24h: 85000000000,
    fearGreedIndex: 65
  })
  const [cryptoPrices, setCryptoPrices] = useState<CryptoPrice[]>([])
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
  const [isLoadingPrices, setIsLoadingPrices] = useState(false)
  const wheelRef = useRef<HTMLDivElement>(null)

  // ÂæÆÁ≠ñÁï•È£éÊ†ºÁöÑÁ≠ñÁï•Â∫ì
  const strategies: Strategy[] = [
    // ÁúãÊ∂®Á≠ñÁï•
    {
      id: 'moon-shot',
      name: 'ÊúàÁêÉÂ∞ÑÂáª',
      emoji: 'üöÄ',
      category: 'bullish',
      description: 'ÂÖ®‰ªìÊ¢≠ÂìàÔºåÁõÆÊ†áÊúàÁêÉÔºÅ',
      risk: 'extreme',
      potential: 'moon',
      advice: [
        'Â∞ÜÊâÄÊúâËµÑÈáëÊäïÂÖ•ÁÉ≠Èó®Â∏ÅÁßç',
        'ËÆæÁΩÆÊ≠¢ÁõàÁõÆÊ†áÔºö10ÂÄçÊî∂Áõä',
        'ÂøΩÁï•ÊâÄÊúâÈ£éÈô©Ë≠¶Âëä',
        'Áõ∏‰ø°"ËøôÊ¨°‰∏ç‰∏ÄÊ†∑"'
      ],
      tokens: [],
      confidence: 95,
      marketSentiment: 'ÊûÅÂ∫¶‰πêËßÇ',
      timeframe: '1-7Â§©'
    },
    {
      id: 'dca-strategy',
      name: 'ÂÆöÊäïÁ≠ñÁï•',
      emoji: 'üìà',
      category: 'bullish',
      description: 'ÂÆöÊúüÂÆöÈ¢ùÊäïËµÑÔºåÈïøÊúüÊåÅÊúâ',
      risk: 'low',
      potential: 'high',
      advice: [
        'ÊØèÂë®Âõ∫ÂÆöÈáëÈ¢ù‰π∞ÂÖ•',
        'ÈÄâÊã©‰∏ªÊµÅÂ∏ÅÁßç',
        'ÈïøÊúüÊåÅÊúâËá≥Â∞ë1Âπ¥',
        '‰∏çË¶ÅË¢´Áü≠ÊúüÊ≥¢Âä®ÂΩ±Âìç'
      ],
      tokens: [],
      confidence: 85,
      marketSentiment: 'Á®≥ÂÅ•ÁúãÊ∂®',
      timeframe: '1-5Âπ¥'
    },
    {
      id: 'momentum-trading',
      name: 'Âä®Èáè‰∫§Êòì',
      emoji: '‚ö°',
      category: 'bullish',
      description: 'Ë∑üÈöèÂ∏ÇÂú∫Ë∂ãÂäøÔºåÂø´ËøõÂø´Âá∫',
      risk: 'high',
      potential: 'high',
      advice: [
        'ÂÖ≥Ê≥®24Â∞èÊó∂Ê∂®ÂπÖÊ¶ú',
        'ËÆæÁΩÆ‰∏•Ê†ºÊ≠¢Êçü',
        '‰∏çË¶ÅÊÅãÊàò',
        'ÂèäÊó∂Ê≠¢Áõà'
      ],
      tokens: [],
      confidence: 70,
      marketSentiment: 'Ë∂ãÂäøË∑üÈöè',
      timeframe: '1-7Â§©'
    },

    // ÁúãË∑åÁ≠ñÁï•
    {
      id: 'short-term',
      name: 'ÂÅöÁ©∫Á≠ñÁï•',
      emoji: 'üìâ',
      category: 'bearish',
      description: 'Â∏ÇÂú∫Âç≥Â∞ÜÂ¥©ÁõòÔºåÂáÜÂ§áÂÅöÁ©∫',
      risk: 'extreme',
      potential: 'high',
      advice: [
        'Á≠âÂæÖÂ∏ÇÂú∫Á°ÆËÆ§‰∏ãË∑åË∂ãÂäø',
        'ÂàÜÊâπÂª∫‰ªìÂÅöÁ©∫',
        'ËÆæÁΩÆ‰∏•Ê†ºÊ≠¢Êçü',
        'ÂÖ≥Ê≥®Â∏ÇÂú∫ÊÉÖÁª™ÊåáÊ†á'
      ],
      tokens: [],
      confidence: 60,
      marketSentiment: 'ÊÇ≤ËßÇ',
      timeframe: '1-30Â§©'
    },
    {
      id: 'cash-position',
      name: 'Áé∞Èáë‰∏∫Áéã',
      emoji: 'üí∞',
      category: 'bearish',
      description: 'ÊåÅÊúâÁé∞ÈáëÔºåÁ≠âÂæÖÊú∫‰ºö',
      risk: 'low',
      potential: 'low',
      advice: [
        '‰øùÊåÅ80%Áé∞Èáë‰ªì‰Ωç',
        'Á≠âÂæÖÂ∏ÇÂú∫Â∫ïÈÉ®‰ø°Âè∑',
        'ÂÖ≥Ê≥®ÊÅêÊÖåÊåáÊï∞',
        'ÂáÜÂ§áÊäÑÂ∫ïËµÑÈáë'
      ],
      tokens: [],
      confidence: 75,
      marketSentiment: 'Ë∞®ÊÖé',
      timeframe: '1-6‰∏™Êúà'
    },

    // ‰∏≠ÊÄßÁ≠ñÁï•
    {
      id: 'grid-trading',
      name: 'ÁΩëÊ†º‰∫§Êòì',
      emoji: 'üï∏Ô∏è',
      category: 'neutral',
      description: 'Âú®‰ª∑Ê†ºÂå∫Èó¥ÂÜÖÈ´òÊäõ‰ΩéÂê∏',
      risk: 'medium',
      potential: 'medium',
      advice: [
        'ËÆæÂÆö‰ª∑Ê†ºÂå∫Èó¥',
        'Ëá™Âä®ÊâßË°å‰π∞Âçñ',
        'ÂÆöÊúüË∞ÉÊï¥ÂèÇÊï∞',
        'ÁõëÊéßÂ∏ÇÂú∫ÂèòÂåñ'
      ],
      tokens: [],
      confidence: 80,
      marketSentiment: '‰∏≠ÊÄß',
      timeframe: '1-3‰∏™Êúà'
    },
    {
      id: 'arbitrage',
      name: 'Â•óÂà©Á≠ñÁï•',
      emoji: 'üîÑ',
      category: 'neutral',
      description: 'Âà©Áî®‰ª∑Ê†ºÂ∑ÆÂºÇËé∑Âà©',
      risk: 'low',
      potential: 'medium',
      advice: [
        'ÁõëÊéß‰∏çÂêå‰∫§ÊòìÊâÄ‰ª∑Â∑Æ',
        'Âø´ÈÄüÊâßË°å‰∫§Êòì',
        'Ê≥®ÊÑèÊâãÁª≠Ë¥πÊàêÊú¨',
        '‰ΩøÁî®Ëá™Âä®ÂåñÂ∑•ÂÖ∑'
      ],
      tokens: [],
      confidence: 90,
      marketSentiment: 'ÊäÄÊúØÊÄß',
      timeframe: 'ÂàÜÈíüÁ∫ß'
    },

    // FOMOÁ≠ñÁï•
    {
      id: 'fomo-buy',
      name: 'FOMO‰π∞ÂÖ•',
      emoji: 'üî•',
      category: 'fomo',
      description: 'ÁúãÂà∞Âà´‰∫∫ËµöÈí±ÔºåÊàë‰πüË¶Å‰∏äËΩ¶ÔºÅ',
      risk: 'extreme',
      potential: 'moon',
      advice: [
        'ÁúãÂà∞Êö¥Ê∂®Á´ãÂç≥‰π∞ÂÖ•',
        '‰∏çË¶ÅÁäπË±´ÔºåÈîôËøáÂ∞±ÊòØÊçüÂ§±',
        'ÂÄüÈí±‰πüË¶Å‰π∞',
        'Áõ∏‰ø°"ËøôÊ¨°‰∏ç‰∏ÄÊ†∑"'
      ],
      tokens: [],
      confidence: 50,
      marketSentiment: 'ÊûÅÂ∫¶FOMO',
      timeframe: 'ÂàÜÈíüÁ∫ß'
    },
    {
      id: 'ape-in',
      name: 'Áåø‰∫∫Á≠ñÁï•',
      emoji: 'ü¶ç',
      category: 'fomo',
      description: 'Áåø‰∫∫ÊÄùÁª¥ÔºöÁúãÂà∞Â∞±‰π∞Ôºå‰∏çÈóÆÂéüÂõ†',
      risk: 'extreme',
      potential: 'moon',
      advice: [
        'ÁúãÂà∞Êñ∞Â∏ÅÂ∞±‰π∞',
        '‰∏çË¶ÅÁúãÁôΩÁöÆ‰π¶',
        'Áõ∏‰ø°Á§æÂå∫ÂäõÈáè',
        'ÂáÜÂ§áÂΩíÈõ∂'
      ],
      tokens: [],
      confidence: 30,
      marketSentiment: 'ÁñØÁãÇ',
      timeframe: '1-7Â§©'
    },

    // HODLÁ≠ñÁï•
    {
      id: 'diamond-hands',
      name: 'ÈíªÁü≥Êâã',
      emoji: 'üíé',
      category: 'hodl',
      description: 'Ê∞∏‰∏çÂçñÂá∫ÔºåÁõ¥Âà∞ÊúàÁêÉ',
      risk: 'high',
      potential: 'moon',
      advice: [
        '‰π∞ÂÖ•ÂêéÂà†Èô§‰∫§ÊòìËΩØ‰ª∂',
        'ËÆæÁΩÆ10Âπ¥ÊèêÈÜí',
        'ÂøΩÁï•ÊâÄÊúâÂçñÂá∫‰ø°Âè∑',
        'Áõ∏‰ø°ÊØîÁâπÂ∏ÅÁªàÂ∞ÜÂà∞100‰∏á'
      ],
      tokens: [],
      confidence: 95,
      marketSentiment: 'ÈïøÊúüÁúãÊ∂®',
      timeframe: '10Âπ¥+'
    },
    {
      id: 'hodl-forever',
      name: 'Ê∞∏‰πÖÊåÅÊúâ',
      emoji: 'üèõÔ∏è',
      category: 'hodl',
      description: '‰º†Áªô‰∏ã‰∏Ä‰ª£',
      risk: 'medium',
      potential: 'high',
      advice: [
        'ÈÄâÊã©‰ºòË¥®È°πÁõÆ',
        'ÂÆöÊúüÊ£ÄÊü•Âü∫Êú¨Èù¢',
        '‰∏çË¶ÅË¢´Áü≠ÊúüÊ≥¢Âä®ÂΩ±Âìç',
        'ËÄÉËôëÈÅó‰∫ßËßÑÂàí'
      ],
      tokens: [],
      confidence: 85,
      marketSentiment: 'ÈïøÊúü‰ª∑ÂÄº',
      timeframe: 'ÁªàË∫´'
    }
  ]

  // Ëé∑ÂèñÈ£éÈô©Á≠âÁ∫ßÈ¢úËâ≤
  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'low': return 'text-green-400'
      case 'medium': return 'text-yellow-400'
      case 'high': return 'text-orange-400'
      case 'extreme': return 'text-red-400'
      default: return 'text-gray-400'
    }
  }

  // Ëé∑ÂèñÊΩúÂäõÁ≠âÁ∫ßÈ¢úËâ≤
  const getPotentialColor = (potential: string) => {
    switch (potential) {
      case 'low': return 'text-gray-400'
      case 'medium': return 'text-blue-400'
      case 'high': return 'text-green-400'
      case 'moon': return 'text-purple-400'
      default: return 'text-gray-400'
    }
  }

  // Ëé∑ÂèñÊΩúÂäõÁ≠âÁ∫ßÂõæÊ†á
  const getPotentialIcon = (potential: string) => {
    switch (potential) {
      case 'low': return 'üìä'
      case 'medium': return 'üìà'
      case 'high': return 'üöÄ'
      case 'moon': return 'üåô'
      default: return 'üìä'
    }
  }

  // Ëé∑ÂèñÂ∏ÇÂú∫ÊÉÖÁª™È¢úËâ≤
  const getSentimentColor = (sentiment: string) => {
    if (sentiment.includes('‰πêËßÇ') || sentiment.includes('ÁúãÊ∂®')) return 'text-green-400'
    if (sentiment.includes('ÊÇ≤ËßÇ') || sentiment.includes('ÁúãË∑å')) return 'text-red-400'
    if (sentiment.includes('Ë∞®ÊÖé') || sentiment.includes('‰∏≠ÊÄß')) return 'text-yellow-400'
    return 'text-gray-400'
  }

  // Ëé∑ÂèñÁúüÂÆû‰ª∑Ê†ºÊï∞ÊçÆ
  const fetchRealPrices = async () => {
    setIsLoadingPrices(true)
    try {
      const symbols = ['BTC', 'ETH', 'SOL']
      const response = await cryptoApiService.getPrices(symbols)
      
      if (response.success && response.data) {
        setCryptoPrices(response.data)
        
        // Êõ¥Êñ∞Â∏ÇÂú∫Êï∞ÊçÆ
        const btcPrice = response.data.find(p => p.symbol === 'BTC')?.price || 45000
        const ethPrice = response.data.find(p => p.symbol === 'ETH')?.price || 2800
        const solPrice = response.data.find(p => p.symbol === 'SOL')?.price || 100
        
        setMarketData(prev => ({
          ...prev,
          btcPrice,
          ethPrice,
          solPrice
        }))
        
        setLastUpdate(new Date())
        console.log('‚úÖ ‰ª∑Ê†ºÊï∞ÊçÆÊõ¥Êñ∞ÊàêÂäü:', response.data)
      } else {
        console.warn('‚ö†Ô∏è APIËøîÂõûÂ§±Ë¥•Ôºå‰ΩøÁî®ÁºìÂ≠òÊï∞ÊçÆ')
      }
    } catch (error) {
      console.error('‚ùå Ëé∑Âèñ‰ª∑Ê†ºÊï∞ÊçÆÂ§±Ë¥•:', error)
    } finally {
      setIsLoadingPrices(false)
    }
  }

  // Ëé∑ÂèñÂ∏ÇÂú∫Ê¶ÇËßàÊï∞ÊçÆ
  const fetchMarketOverview = async () => {
    try {
      const overview = await cryptoApiService.getMarketOverview()
      setMarketData(prev => ({
        ...prev,
        marketCap: overview.totalMarketCap,
        volume24h: overview.totalVolume24h,
        fearGreedIndex: overview.fearGreedIndex
      }))
    } catch (error) {
      console.error('Ëé∑ÂèñÂ∏ÇÂú∫Ê¶ÇËßàÂ§±Ë¥•:', error)
    }
  }

  // ÊóãËΩ¨ËΩÆÁõò
  const spinRoulette = () => {
    if (isSpinning) return

    setIsSpinning(true)
    setSpinCount(prev => prev + 1)

    // ÈöèÊú∫ÈÄâÊã©Á≠ñÁï•
    const randomStrategy = strategies[Math.floor(Math.random() * strategies.length)]
    
    // ËÆ°ÁÆóÊóãËΩ¨ËßíÂ∫¶
    const spins = 5 + Math.random() * 5 // 5-10Âúà
    const finalRotation = rotation + (spins * 360)
    setRotation(finalRotation)

    // Âä®ÁîªÁªìÊùüÂêéÊòæÁ§∫ÁªìÊûú
    setTimeout(() => {
      setCurrentStrategy(randomStrategy)
      setIsSpinning(false)

      // ‰øùÂ≠òÂà∞ÂéÜÂè≤ËÆ∞ÂΩï
      const newHistory: RouletteHistory = {
        id: Date.now().toString(),
        strategy: randomStrategy,
        timestamp: Date.now(),
        userAddress: publicKey?.toString() || undefined,
        likes: 0,
        shares: 0,
        comments: 0
      }
      setRouletteHistory(prev => [newHistory, ...prev.slice(0, 19)])
    }, 3000)
  }

  // ÁÇπËµûÁ≠ñÁï•
  const likeStrategy = (historyId: string) => {
    setRouletteHistory(prev => 
      prev.map(item => 
        item.id === historyId ? { ...item, likes: item.likes + 1 } : item
      )
    )
  }



  // ÂàùÂßãÂåñÊï∞ÊçÆ
  useEffect(() => {
    fetchRealPrices()
    fetchMarketOverview()
  }, [])

  // ÊØè10ÂàÜÈíüËá™Âä®Êõ¥Êñ∞‰ª∑Ê†ºÊï∞ÊçÆ
  useEffect(() => {
    const interval = setInterval(() => {
      fetchRealPrices()
      fetchMarketOverview()
    }, 10 * 60 * 1000) // 10ÂàÜÈíü

    return () => clearInterval(interval)
  }, [])

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-4xl font-bold text-white mb-4">
          üé∞ NoStrategy Strategy Roulette
        </h2>
        <p className="text-gray-300 text-lg">
          Randomly generate your investment strategy, mimicking MicroStrategy's "professional" advice
        </p>
      </div>



      {/* Ê†áÁ≠æÈ°µ */}
      <div className="flex justify-center space-x-4 mb-6">
        {[
          { id: 'spin', name: 'üé∞ Spin', emoji: 'üé∞' }
        ].map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id as any)}
            className={`px-6 py-3 rounded-lg transition-all duration-300 ${
              activeTab === tab.id
                ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                : 'bg-white/10 text-gray-300 hover:bg-white/20'
            }`}
          >
            {tab.name}
          </button>
        ))}
      </div>

      {activeTab === 'spin' && (
        <div className="bg-black/50 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Â∑¶‰æßÔºöËΩÆÁõò */}
            <div className="text-center space-y-6">
              <h3 className="text-2xl font-bold text-white mb-4">üé∞ Strategy Roulette</h3>
              
              {/* ËΩÆÁõòÂÆπÂô® */}
              <div className="relative w-80 h-80 mx-auto">
                <div
                  ref={wheelRef}
                  className={`w-full h-full rounded-full border-4 border-purple-500 bg-gradient-to-br from-purple-600 to-pink-600 transition-transform duration-3000 ease-out ${
                    isSpinning ? 'animate-spin' : ''
                  }`}
                  style={{ transform: `rotate(${rotation}deg)` }}
                >
                  {/* ËΩÆÁõòÂàÜÂâ≤Á∫ø */}
                  {strategies.map((strategy, index) => {
                    const angle = (360 / strategies.length) * index
                    return (
                      <div
                        key={strategy.id}
                        className="absolute inset-0 flex items-center justify-center"
                        style={{ transform: `rotate(${angle}deg)` }}
                      >
                        <div className="text-2xl transform -rotate-90">
                          {strategy.emoji}
                        </div>
                      </div>
                    )
                  })}
                </div>

                {/* ÊåáÈíà */}
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                  <div className="w-0 h-0 border-l-8 border-r-8 border-b-16 border-transparent border-b-white"></div>
                </div>
              </div>

              {/* ÊéßÂà∂ÊåâÈíÆ */}
              <div className="space-y-4">
                <button
                  onClick={spinRoulette}
                  disabled={isSpinning}
                  className="w-full py-4 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 disabled:opacity-50 text-white rounded-lg font-semibold text-lg"
                >
                  {isSpinning ? 'üé∞ Spinning...' : 'üé∞ Spin Roulette'}
                </button>
                
                <div className="text-gray-400">
                  Spun {spinCount} times
                </div>
              </div>
            </div>

            {/* Âè≥‰æßÔºöÁ≠ñÁï•ÁªìÊûú */}
            <div className="space-y-6">
              <h3 className="text-2xl font-bold text-white mb-4">üìã Strategy Result</h3>
              
              {currentStrategy ? (
                <div className="space-y-6">
                  {/* Á≠ñÁï•Ê¶ÇËßà */}
                  <div className="bg-white/5 rounded-lg p-6">
                    <div className="flex items-center space-x-4 mb-4">
                      <div className="text-4xl">{currentStrategy.emoji}</div>
                      <div>
                        <h4 className="text-xl font-bold text-white">{currentStrategy.name}</h4>
                        <p className="text-gray-300">{currentStrategy.description}</p>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <span className="text-gray-400 text-sm">Risk Level</span>
                        <div className={`font-semibold ${getRiskColor(currentStrategy.risk)}`}>
                          {currentStrategy.risk.toUpperCase()}
                        </div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Potential Level</span>
                        <div className={`font-semibold ${getPotentialColor(currentStrategy.potential)}`}>
                          {getPotentialIcon(currentStrategy.potential)} {currentStrategy.potential.toUpperCase()}
                        </div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Confidence</span>
                        <div className="text-white font-semibold">{currentStrategy.confidence}%</div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Timeframe</span>
                        <div className="text-white font-semibold">{currentStrategy.timeframe}</div>
                      </div>
                    </div>

                    <div>
                      <span className="text-gray-400 text-sm">Market Sentiment</span>
                      <div className={`font-semibold ${getSentimentColor(currentStrategy.marketSentiment)}`}>
                        {currentStrategy.marketSentiment}
                      </div>
                    </div>
                  </div>

                  {/* ÊäïËµÑÂª∫ËÆÆ */}
                  <div className="bg-white/5 rounded-lg p-6">
                    <h5 className="text-lg font-bold text-white mb-3">üí° Investment Advice</h5>
                    <ul className="space-y-2">
                      {currentStrategy.advice.map((advice, index) => (
                        <li key={index} className="flex items-start space-x-2">
                          <span className="text-purple-400 mt-1">‚Ä¢</span>
                          <span className="text-gray-300">{advice}</span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Êìç‰ΩúÊåâÈíÆ */}
                  <div className="flex space-x-4">
                    <button
                      onClick={spinRoulette}
                      className="flex-1 bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold"
                    >
                      üé∞ Spin Again
                    </button>
                            <button
          onClick={() => window.open('https://letsbonk.fun/token/CkEdG6cUUEuDjMnivruciM45KeQ8NNRioW2vnhGJbonk', '_blank')}
          className="flex-1 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white py-2 px-4 rounded-lg font-semibold"
        >
          üöÄ Buy $NoStrategy
        </button>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <div className="text-6xl mb-4">üé∞</div>
                  <p className="text-gray-300 text-lg">Click the roulette to start getting strategies</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'history' && (
        <div className="bg-black/50 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-2xl font-bold text-white">üìä History</h3>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="bg-white/10 border border-purple-500/30 rounded px-3 py-1 text-white"
            >
              <option value="all">All Strategies</option>
              <option value="bullish">Bullish Strategies</option>
              <option value="bearish">Bearish Strategies</option>
              <option value="neutral">Neutral Strategies</option>
              <option value="fomo">FOMO Strategies</option>
              <option value="hodl">HODL Strategies</option>
            </select>
          </div>

          {rouletteHistory.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üìä</div>
              <p className="text-gray-300 text-lg">No history yet, go spin the roulette!</p>
            </div>
          ) : (
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {rouletteHistory
                .filter(item => selectedCategory === 'all' || item.strategy.category === selectedCategory)
                .map(item => (
                  <div key={item.id} className="bg-white/5 rounded-lg p-4 space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="text-2xl">{item.strategy.emoji}</div>
                        <div>
                          <div className="text-white font-semibold">{item.strategy.name}</div>
                          <div className="text-gray-400 text-sm">
                            {new Date(item.timestamp).toLocaleString()}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => likeStrategy(item.id)}
                          className="flex items-center space-x-1 text-gray-300 hover:text-red-400"
                        >
                          <span>‚ù§Ô∏è</span>
                          <span>{item.likes}</span>
                        </button>
                      </div>
                    </div>
                    <div className="text-gray-300 text-sm">{item.strategy.description}</div>
                    <div className="flex space-x-4 text-xs text-gray-400">
                      <span>È£éÈô©: {item.strategy.risk.toUpperCase()}</span>
                      <span>ÊΩúÂäõ: {item.strategy.potential.toUpperCase()}</span>
                      <span>‰ø°ÂøÉ: {item.strategy.confidence}%</span>
                    </div>
                  </div>
                ))}
            </div>
          )}
        </div>
      )}

      {activeTab === 'analysis' && (
        <div className="space-y-6">
          {/* Â∏ÇÂú∫Ê¶ÇËßà */}
          <div className="bg-black/50 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30">
            <h3 className="text-2xl font-bold text-white mb-6">üìà Â∏ÇÂú∫Ê¶ÇËßà</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
              <div className="bg-white/5 rounded-lg p-4 text-center">
                <div className="text-2xl mb-2">‚Çø</div>
                <div className="text-white font-semibold">${marketData.btcPrice.toLocaleString()}</div>
                <div className="text-gray-400 text-sm">BTC‰ª∑Ê†º</div>
              </div>
              <div className="bg-white/5 rounded-lg p-4 text-center">
                <div className="text-2xl mb-2">Œû</div>
                <div className="text-white font-semibold">${marketData.ethPrice.toLocaleString()}</div>
                <div className="text-gray-400 text-sm">ETH‰ª∑Ê†º</div>
              </div>
              <div className="bg-white/5 rounded-lg p-4 text-center">
                <div className="text-2xl mb-2">‚óé</div>
                <div className="text-white font-semibold">${marketData.solPrice.toFixed(2)}</div>
                <div className="text-gray-400 text-sm">SOL‰ª∑Ê†º</div>
              </div>
              <div className="bg-white/5 rounded-lg p-4 text-center">
                <div className="text-2xl mb-2">üìä</div>
                <div className="text-white font-semibold">${(marketData.marketCap / 1e12).toFixed(2)}T</div>
                <div className="text-gray-400 text-sm">ÊÄªÂ∏ÇÂÄº</div>
              </div>
            </div>
          </div>

          {/* ÊÅêÊÉßË¥™Â©™ÊåáÊï∞ */}
          <div className="bg-black/50 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30">
            <h3 className="text-2xl font-bold text-white mb-6">üò® ÊÅêÊÉßË¥™Â©™ÊåáÊï∞</h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-300">ÂΩìÂâçÊåáÊï∞</span>
                <span className="text-2xl font-bold text-white">{marketData.fearGreedIndex}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-4">
                <div 
                  className={`h-4 rounded-full transition-all duration-500 ${
                    marketData.fearGreedIndex > 70 ? 'bg-green-500' :
                    marketData.fearGreedIndex > 50 ? 'bg-yellow-500' :
                    marketData.fearGreedIndex > 30 ? 'bg-orange-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${marketData.fearGreedIndex}%` }}
                />
              </div>
              <div className="flex justify-between text-sm text-gray-400">
                <span>ÊûÅÂ∫¶ÊÅêÊÉß</span>
                <span>ÊÅêÊÉß</span>
                <span>‰∏≠ÊÄß</span>
                <span>Ë¥™Â©™</span>
                <span>ÊûÅÂ∫¶Ë¥™Â©™</span>
              </div>
              <div className="text-center">
                <p className="text-gray-300">
                  {marketData.fearGreedIndex > 70 ? 'Â∏ÇÂú∫ÊûÅÂ∫¶Ë¥™Â©™ÔºåËÄÉËôëÂáè‰ªì' :
                   marketData.fearGreedIndex > 50 ? 'Â∏ÇÂú∫ÊÉÖÁª™‰∏≠ÊÄßÔºå‰øùÊåÅËßÇÊúõ' :
                   marketData.fearGreedIndex > 30 ? 'Â∏ÇÂú∫ÊÅêÊÉßÔºåÂèØËÉΩÊòØ‰π∞ÂÖ•Êú∫‰ºö' : 'Â∏ÇÂú∫ÊûÅÂ∫¶ÊÅêÊÉßÔºåÂáÜÂ§áÊäÑÂ∫ï'}
                </p>
              </div>
            </div>
          </div>

          {/* Á≠ñÁï•ÂàÜÂ∏É */}
          <div className="bg-black/50 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30">
            <h3 className="text-2xl font-bold text-white mb-6">üìä Á≠ñÁï•ÂàÜÂ∏É</h3>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              {[
                { category: 'bullish', name: 'ÁúãÊ∂®', emoji: 'üìà', count: strategies.filter(s => s.category === 'bullish').length },
                { category: 'bearish', name: 'ÁúãË∑å', emoji: 'üìâ', count: strategies.filter(s => s.category === 'bearish').length },
                { category: 'neutral', name: '‰∏≠ÊÄß', emoji: 'üìä', count: strategies.filter(s => s.category === 'neutral').length },
                { category: 'fomo', name: 'FOMO', emoji: 'üî•', count: strategies.filter(s => s.category === 'fomo').length },
                { category: 'hodl', name: 'HODL', emoji: 'üíé', count: strategies.filter(s => s.category === 'hodl').length }
              ].map(item => (
                <div key={item.category} className="bg-white/5 rounded-lg p-4 text-center">
                  <div className="text-2xl mb-2">{item.emoji}</div>
                  <div className="text-white font-semibold">{item.name}</div>
                  <div className="text-gray-400 text-sm">{item.count} ‰∏™Á≠ñÁï•</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}


    </div>
  )
}

export default StrategyRoulette 